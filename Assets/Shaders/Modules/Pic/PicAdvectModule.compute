#pragma kernel PicAdvect

#include "../../Common.hlsl"
#include "../../Grid.hlsl"


RWStructuredBuffer<Particle> _ParticleBuffer;
Texture3D<float3> _FieldVelocityBuffer;
SamplerState sampler_FieldVelocityBuffer;

DEFINE_SPACE(_Space);
DEFINE_GRID(_FieldVelocityBuffer);
float _SimulationStep;



[numthreads(128, 1, 1)]
void PicAdvect(uint3 threadId : SV_DispatchThreadId)
{
    RETURN_IF_INVALID(threadId);

    const uint pId = threadId.x;
    
    Particle p = _ParticleBuffer[pId];

    float3 uv = WorldPosToUv(p.position, _SpaceMin, _FieldVelocityBufferGridInvSpacing, _FieldVelocityBufferGridSize);
    float3 vel = _FieldVelocityBuffer.SampleLevel(sampler_FieldVelocityBuffer, uv, 0).xyz;

    p.position += vel * _SimulationStep;

    ClampPosition(p.position, _SpaceMin, _SpaceMax);
    p.color = 0.01 + float4(CalcStrengthColor(length(vel) * 0.05), 1.0f);

    _ParticleBuffer[pId] = p;
}