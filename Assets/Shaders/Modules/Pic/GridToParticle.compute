#pragma kernel GridToParticle

#include "../../Common.hlsl"
#include "../../Grid.hlsl"

RWStructuredBuffer<Particle> _ParticleBuffer;
Texture3D<float3> _FieldVelocityBuffer;         // Current velocity
Texture3D<float3> _FieldVelocityBufferWrite;    // Original velocity
SamplerState sampler_FieldVelocityBuffer;
SamplerState sampler_FieldVelocityBufferWrite;

float3 _GridMin;
int3 _GridSize;
float _GridInvSpacing;
float _Flipness;

[numthreads(128, 1, 1)]
void GridToParticle(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint p_id = thread_id.x;

    Particle p = _ParticleBuffer[p_id];

    float3 uv = WorldPosToUv(p.position, _GridMin, _GridInvSpacing, _GridSize);

    const float3 g_origin_vel = _FieldVelocityBufferWrite.SampleLevel(sampler_FieldVelocityBufferWrite, uv, 0).xyz;
    const float3 g_vel = _FieldVelocityBuffer.SampleLevel(sampler_FieldVelocityBuffer, uv, 0).xyz;

    const float3 p_pic_vel = g_vel;
    const float3 p_flip_vel = p.velocity + (g_vel - g_origin_vel);

    p.velocity = lerp(p_pic_vel, p_flip_vel, _Flipness);

    _ParticleBuffer[p_id] = p;
}